
R version 4.0.5 (2021-03-31) -- "Shake and Throw"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "moderndive"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('moderndive')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("DD_vs_SB")
> ### * DD_vs_SB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DD_vs_SB
> ### Title: Dunkin Donuts vs Starbucks
> ### Aliases: DD_vs_SB
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # Compute correlation between a census tract's median income and number of cafes of
> # each type after removing two cases where median_income is missing
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> DD_vs_SB %>%
+   mutate(shops_per_1000 = 1000 * shops / population) %>%
+   filter(!is.na(median_income)) %>%
+   group_by(shop_type) %>%
+   summarize(cor = cor(median_income, shops_per_1000))
# A tibble: 2 x 2
  shop_type         cor
  <chr>           <dbl>
1 dunkin_donuts -0.0575
2 starbucks      0.0980
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("MA_schools")
> ### * MA_schools
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MA_schools
> ### Title: Massachusetts Public High Schools Data
> ### Aliases: MA_schools
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> ggplot(MA_schools, aes(x = perc_disadvan, y = average_sat_math, color = size)) +
+   geom_point() +
+   geom_smooth(method = "lm", se = FALSE) +
+   labs(y = "Math SAT score", x = "Percentage economically disadvantaged", color = "School size")
`geom_smooth()` using formula 'y ~ x'
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("bowl")
> ### * bowl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bowl
> ### Title: A sampling bowl of red and white balls
> ### Aliases: bowl
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> 
> # Take 10 different samples of size n = 50 balls from bowl
> bowl_samples_simulated <- bowl %>%
+   rep_sample_n(50, reps = 10)
> 
> # Compute 10 different p_hats (prop red) based on 10 different samples of
> # size n = 50
> p_hats <- bowl_samples_simulated %>%
+   group_by(replicate, color) %>%
+   summarize(count = n()) %>%
+   mutate(proportion = count / 50) %>%
+   filter(color == "red")
`summarise()` has grouped output by 'replicate'. You can override using the `.groups` argument.
> 
> # Plot sampling distribution
> ggplot(p_hats, aes(x = proportion)) +
+   geom_histogram(binwidth = 0.05) +
+   labs(
+     x = expression(hat(p)), y = "Number of samples",
+     title = "Sampling distribution of p_hat based 10 samples of size n = 50"
+   )
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:dplyr’

> nameEx("bowl_sample_1")
> ### * bowl_sample_1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bowl_sample_1
> ### Title: Tactile sample of size 50 from a bowl of balls
> ### Aliases: bowl_sample_1
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # Barplot of distribution of balls in sample
> ggplot(bowl_sample_1, aes(x = color)) +
+   geom_bar() +
+   labs(title = "50 sampled bals from bowl")
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("bowl_samples")
> ### * bowl_samples
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bowl_samples
> ### Title: Sampling from a bowl of balls
> ### Aliases: bowl_samples
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> 
> # Compute proportion red
> bowl_samples <- bowl_samples %>%
+   mutate(prop_red = red / n)
> 
> # Plot sampling distributions
> ggplot(bowl_samples, aes(x = prop_red)) +
+   geom_histogram(binwidth = 0.05) +
+   labs(
+     x = expression(hat(p)), y = "Number of samples",
+     title = "Sampling distribution of p_hat based 10 samples of size n = 50"
+   )
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:dplyr’

> nameEx("evals")
> ### * evals
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evals
> ### Title: Teaching evaluations at the UT Austin
> ### Aliases: evals
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> glimpse(evals)
Rows: 463
Columns: 14
$ ID           <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…
$ prof_ID      <int> 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, …
$ score        <dbl> 4.7, 4.1, 3.9, 4.8, 4.6, 4.3, 2.8, 4.1, 3.4, 4.5, 3.8, 4.…
$ age          <int> 36, 36, 36, 36, 59, 59, 59, 51, 51, 40, 40, 40, 40, 40, 4…
$ bty_avg      <dbl> 5.000, 5.000, 5.000, 5.000, 3.000, 3.000, 3.000, 3.333, 3…
$ gender       <fct> female, female, female, female, male, male, male, male, m…
$ ethnicity    <fct> minority, minority, minority, minority, not minority, not…
$ language     <fct> english, english, english, english, english, english, eng…
$ rank         <fct> tenure track, tenure track, tenure track, tenure track, t…
$ pic_outfit   <fct> not formal, not formal, not formal, not formal, not forma…
$ pic_color    <fct> color, color, color, color, color, color, color, color, c…
$ cls_did_eval <int> 24, 86, 76, 77, 17, 35, 39, 55, 111, 40, 24, 24, 17, 14, …
$ cls_students <int> 43, 125, 125, 123, 20, 40, 44, 55, 195, 46, 27, 25, 20, 2…
$ cls_level    <fct> upper, upper, upper, upper, upper, upper, upper, upper, u…
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("geom_categorical_model")
> ### * geom_categorical_model
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geom_categorical_model
> ### Title: Regression model with one categorical explanatory/predictor
> ###   variable
> ### Aliases: geom_categorical_model
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> 
> p <- ggplot(mpg, aes(x = drv, y = hwy)) +
+   geom_point() +
+   geom_categorical_model()
> p
> 
> # You can use different colors for each categorical level
> p %+% aes(color = drv)
> 
> # But mapping the color aesthetic doesn't change the model that is fit
> p %+% aes(color = class)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:dplyr’

> nameEx("geom_parallel_slopes")
> ### * geom_parallel_slopes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geom_parallel_slopes
> ### Title: Parallel slopes regression model
> ### Aliases: geom_parallel_slopes
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> 
> ggplot(evals, aes(x = age, y = score, color = ethnicity)) +
+   geom_point() +
+   geom_parallel_slopes(se = FALSE)
> 
> # Basic usage
> ggplot(evals, aes(x = age, y = score, color = ethnicity)) +
+   geom_point() +
+   geom_parallel_slopes()
> ggplot(evals, aes(x = age, y = score, color = ethnicity)) +
+   geom_point() +
+   geom_parallel_slopes(se = FALSE)
> 
> # Supply custom aesthetics
> ggplot(evals, aes(x = age, y = score, color = ethnicity)) +
+   geom_point() +
+   geom_parallel_slopes(se = FALSE, size = 4)
> 
> # Fit non-linear model
> example_df <- house_prices %>%
+   slice(1:1000) %>%
+   mutate(
+     log10_price = log10(price),
+     log10_size = log10(sqft_living)
+   )
> ggplot(example_df, aes(x = log10_size, y = log10_price, color = condition)) +
+   geom_point(alpha = 0.1) +
+   geom_parallel_slopes(formula = y ~ poly(x, 2))
> 
> # Different grouping
> ggplot(example_df, aes(x = log10_size, y = log10_price)) +
+   geom_point(alpha = 0.1) +
+   geom_parallel_slopes(aes(fill = condition))
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:dplyr’

> nameEx("get_correlation")
> ### * get_correlation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_correlation
> ### Title: Get correlation value in a tidy way
> ### Aliases: get_correlation
> 
> ### ** Examples
> 
> library(moderndive)
> 
> # Compute correlation between mpg and cyl:
> mtcars %>%
+   get_correlation(formula = mpg ~ cyl)
        cor
1 -0.852162
> 
> # Group by one variable:
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> mtcars %>%
+   group_by(am) %>%
+   get_correlation(formula = mpg ~ cyl)
# A tibble: 2 x 2
     am    cor
  <dbl>  <dbl>
1     0 -0.796
2     1 -0.826
> 
> # Group by two variables:
> mtcars %>%
+   group_by(am, gear) %>%
+   get_correlation(formula = mpg ~ cyl)
# A tibble: 4 x 3
# Groups:   am [2]
     am  gear    cor
  <dbl> <dbl>  <dbl>
1     0     3 -0.645
2     0     4 -0.959
3     1     4 -0.601
4     1     5 -0.961
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("get_regression_points")
> ### * get_regression_points
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_regression_points
> ### Title: Get regression points
> ### Aliases: get_regression_points
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tibble)
> 
> # Convert rownames to column
> mtcars <- mtcars %>%
+   rownames_to_column(var = "automobile")
> 
> # Fit lm() regression:
> mpg_model <- lm(mpg ~ cyl, data = mtcars)
> 
> # Get information on all points in regression:
> get_regression_points(mpg_model, ID = "automobile")
# A tibble: 32 x 5
   automobile          mpg   cyl mpg_hat residual
   <chr>             <dbl> <dbl>   <dbl>    <dbl>
 1 Mazda RX4          21       6    20.6    0.37 
 2 Mazda RX4 Wag      21       6    20.6    0.37 
 3 Datsun 710         22.8     4    26.4   -3.58 
 4 Hornet 4 Drive     21.4     6    20.6    0.77 
 5 Hornet Sportabout  18.7     8    14.9    3.82 
 6 Valiant            18.1     6    20.6   -2.53 
 7 Duster 360         14.3     8    14.9   -0.578
 8 Merc 240D          24.4     4    26.4   -1.98 
 9 Merc 230           22.8     4    26.4   -3.58 
10 Merc 280           19.2     6    20.6   -1.43 
# … with 22 more rows
> 
> # Create training and test set based on mtcars:
> training_set <- mtcars %>%
+   sample_frac(0.5)
> test_set <- mtcars %>%
+   anti_join(training_set, by = "automobile")
> 
> # Fit model to training set:
> mpg_model_train <- lm(mpg ~ cyl, data = training_set)
> 
> # Make predictions on test set:
> get_regression_points(mpg_model_train, newdata = test_set, ID = "automobile")
# A tibble: 16 x 5
   automobile            mpg   cyl mpg_hat residual
   <chr>               <dbl> <dbl>   <dbl>    <dbl>
 1 Datsun 710           22.8     4    27.2   -4.40 
 2 Hornet Sportabout    18.7     8    15.2    3.48 
 3 Valiant              18.1     6    21.2   -3.11 
 4 Merc 240D            24.4     4    27.2   -2.80 
 5 Merc 230             22.8     4    27.2   -4.40 
 6 Merc 450SE           16.4     8    15.2    1.18 
 7 Merc 450SL           17.3     8    15.2    2.08 
 8 Cadillac Fleetwood   10.4     8    15.2   -4.82 
 9 Lincoln Continental  10.4     8    15.2   -4.82 
10 Chrysler Imperial    14.7     8    15.2   -0.522
11 Dodge Challenger     15.5     8    15.2    0.278
12 Camaro Z28           13.3     8    15.2   -1.92 
13 Fiat X1-9            27.3     4    27.2    0.098
14 Porsche 914-2        26       4    27.2   -1.20 
15 Lotus Europa         30.4     4    27.2    3.20 
16 Maserati Bora        15       8    15.2   -0.222
> 
> 
> 
> cleanEx()

detaching ‘package:tibble’, ‘package:dplyr’

> nameEx("get_regression_summaries")
> ### * get_regression_summaries
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_regression_summaries
> ### Title: Get regression summary values
> ### Aliases: get_regression_summaries
> 
> ### ** Examples
> 
> library(moderndive)
> 
> # Fit lm() regression:
> mpg_model <- lm(mpg ~ cyl, data = mtcars)
> 
> # Get regression summaries:
> get_regression_summaries(mpg_model)
# A tibble: 1 x 9
  r_squared adj_r_squared   mse  rmse sigma statistic p_value    df  nobs
      <dbl>         <dbl> <dbl> <dbl> <dbl>     <dbl>   <dbl> <dbl> <dbl>
1     0.726         0.717  9.64  3.10  3.21      79.6       0     1    32
> 
> 
> 
> cleanEx()
> nameEx("get_regression_table")
> ### * get_regression_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_regression_table
> ### Title: Get regression table
> ### Aliases: get_regression_table
> 
> ### ** Examples
> 
> library(moderndive)
> 
> # Fit lm() regression:
> mpg_model <- lm(mpg ~ cyl, data = mtcars)
> 
> # Get regression table:
> get_regression_table(mpg_model)
# A tibble: 2 x 7
  term      estimate std_error statistic p_value lower_ci upper_ci
  <chr>        <dbl>     <dbl>     <dbl>   <dbl>    <dbl>    <dbl>
1 intercept    37.9      2.07      18.3        0    33.6     42.1 
2 cyl          -2.88     0.322     -8.92       0    -3.53    -2.22
> 
> 
> 
> cleanEx()
> nameEx("gg_parallel_slopes")
> ### * gg_parallel_slopes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gg_parallel_slopes
> ### Title: Plot parallel slopes model
> ### Aliases: gg_parallel_slopes
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(ggplot2)
> ##D library(dplyr)
> ##D library(moderndive)
> ##D 
> ##D # log10() transformations
> ##D house_prices <- house_prices %>%
> ##D   mutate(
> ##D     log10_price = log10(price),
> ##D     log10_size = log10(sqft_living)
> ##D   )
> ##D 
> ##D # Output parallel slopes model plot:
> ##D gg_parallel_slopes(
> ##D   y = "log10_price", num_x = "log10_size", cat_x = "condition",
> ##D   data = house_prices, alpha = 0.1
> ##D ) +
> ##D   labs(
> ##D     x = "log10 square feet living space", y = "log10 price in USD",
> ##D     title = "House prices in Seattle: Parallel slopes model"
> ##D   )
> ##D 
> ##D # Compare with interaction model plot:
> ##D ggplot(house_prices, aes(x = log10_size, y = log10_price, col = condition)) +
> ##D   geom_point(alpha = 0.1) +
> ##D   geom_smooth(method = "lm", se = FALSE, size = 1) +
> ##D   labs(
> ##D     x = "log10 square feet living space", y = "log10 price in USD",
> ##D     title = "House prices in Seattle: Interaction model"
> ##D   )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("house_prices")
> ### * house_prices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: house_prices
> ### Title: House Sales in King County, USA
> ### Aliases: house_prices
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> 
> # Create variable log of house price
> house_prices <- house_prices %>%
+   mutate(log_price = log(price))
> 
> # Plot histogram of log of house price
> ggplot(house_prices, aes(x = log_price)) +
+   geom_histogram()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:dplyr’

> nameEx("moderndive")
> ### * moderndive
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: moderndive
> ### Title: moderndive - Tidyverse-Friendly Introductory Linear Regression
> ### Aliases: moderndive
> 
> ### ** Examples
> 
> library(moderndive)
> 
> # Fit regression model:
> mpg_model <- lm(mpg ~ hp, data = mtcars)
> 
> # Regression tables:
> get_regression_table(mpg_model)
# A tibble: 2 x 7
  term      estimate std_error statistic p_value lower_ci upper_ci
  <chr>        <dbl>     <dbl>     <dbl>   <dbl>    <dbl>    <dbl>
1 intercept   30.1        1.63     18.4        0   26.8     33.4  
2 hp          -0.068      0.01     -6.74       0   -0.089   -0.048
> 
> # Information on each point in a regression:
> get_regression_points(mpg_model)
# A tibble: 32 x 5
      ID   mpg    hp mpg_hat residual
   <int> <dbl> <dbl>   <dbl>    <dbl>
 1     1  21     110    22.6   -1.59 
 2     2  21     110    22.6   -1.59 
 3     3  22.8    93    23.8   -0.954
 4     4  21.4   110    22.6   -1.19 
 5     5  18.7   175    18.2    0.541
 6     6  18.1   105    22.9   -4.84 
 7     7  14.3   245    13.4    0.917
 8     8  24.4    62    25.9   -1.47 
 9     9  22.8    95    23.6   -0.817
10    10  19.2   123    21.7   -2.51 
# … with 22 more rows
> 
> # Regression summaries
> get_regression_summaries(mpg_model)
# A tibble: 1 x 9
  r_squared adj_r_squared   mse  rmse sigma statistic p_value    df  nobs
      <dbl>         <dbl> <dbl> <dbl> <dbl>     <dbl>   <dbl> <dbl> <dbl>
1     0.602         0.589  14.0  3.74  3.86      45.5       0     1    32
> 
> # Plotting parallel slopes models
> library(ggplot2)
> ggplot(evals, aes(x = age, y = score, color = ethnicity)) +
+   geom_point() +
+   geom_parallel_slopes(se = FALSE)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("movies_sample")
> ### * movies_sample
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: movies_sample
> ### Title: Random sample of 68 action and romance movies
> ### Aliases: movies_sample
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # Visualize relationship between rating and genre
> ggplot(data = movies_sample, aes(x = genre, y = rating)) +
+   geom_boxplot() +
+   labs(x = "Genre: Action or Romance", y = "IMDb rating")
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("mythbusters_yawn")
> ### * mythbusters_yawn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mythbusters_yawn
> ### Title: Data from Mythbusters' study on contagiousness of yawning
> ### Aliases: mythbusters_yawn
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # Plot both variables as a stacked proportional bar chart
> ggplot(mythbusters_yawn, aes(x = group, fill = yawn)) +
+   geom_bar(position = "fill") +
+   labs(
+     x = "", y = "Proportion",
+     title = "Proportion of yawn and not yawn for each group"
+   )
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("orig_pennies_sample")
> ### * orig_pennies_sample
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: orig_pennies_sample
> ### Title: A random sample of 40 pennies sampled from the 'pennies' data
> ###   frame
> ### Aliases: orig_pennies_sample
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> 
> # Take 50 different resamples/bootstraps from the original sample
> many_bootstraps <- orig_pennies_sample %>%
+   rep_sample_n(size = 40, replace = TRUE, reps = 50)
> many_bootstraps
# A tibble: 2,000 x 3
# Groups:   replicate [50]
   replicate  year age_in_2011
       <int> <dbl>       <dbl>
 1         1  1992          19
 2         1  2001          10
 3         1  2005           6
 4         1  1961          50
 5         1  1983          28
 6         1  1964          47
 7         1  1986          25
 8         1  1972          39
 9         1  1987          24
10         1  1987          24
# … with 1,990 more rows
> 
> # Compute mean year of minting for each bootstrap sample
> bootstrap_means <- many_bootstraps %>%
+   group_by(replicate) %>%
+   summarize(mean_year = mean(year))
> 
> # Plot sampling distribution
> ggplot(bootstrap_means, aes(x = mean_year)) +
+   geom_histogram(binwidth = 1, color = "white") +
+   labs(
+     x = expression(bar(x)), y = "Number of samples",
+     title = "Bootstrap distribution of x_bar based 50 resamples of size n = 40"
+   )
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:dplyr’

> nameEx("pennies")
> ### * pennies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pennies
> ### Title: A population of 800 pennies sampled in 2011
> ### Aliases: pennies
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> 
> # Take 25 different samples of size n = 50 pennies from population
> many_samples <- pennies %>%
+   rep_sample_n(size = 50, reps = 25)
> many_samples
# A tibble: 1,250 x 3
# Groups:   replicate [25]
   replicate  year age_in_2011
       <int> <int>       <int>
 1         1  2006           5
 2         1  1974          37
 3         1  1981          30
 4         1  1995          16
 5         1  2001          10
 6         1  2005           6
 7         1  2008           3
 8         1  2006           5
 9         1  1990          21
10         1  2000          11
# … with 1,240 more rows
> 
> # Compute mean year of minting for each sample
> sample_means <- many_samples %>%
+   group_by(replicate) %>%
+   summarize(mean_year = mean(year))
> 
> # Plot sampling distribution
> ggplot(sample_means, aes(x = mean_year)) +
+   geom_histogram(binwidth = 1, color = "white") +
+   labs(
+     x = expression(bar(x)), y = "Number of samples",
+     title = "Sampling distribution of x_bar based 25 samples of size n = 50"
+   )
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:dplyr’

> nameEx("pennies_resamples")
> ### * pennies_resamples
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pennies_resamples
> ### Title: Bootstrap resamples of a sample of 50 pennies
> ### Aliases: pennies_resamples
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> bootstrap_sample_means <- pennies_resamples %>%
+   group_by(name) %>%
+   summarize(sample_mean = mean(year))
> 
> ggplot(bootstrap_sample_means, aes(x = sample_mean)) +
+   geom_histogram(binwidth = 2.5) +
+   labs(x = "sample mean year", title = "Bootstrap distribution of sample mean year")
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’, ‘package:ggplot2’

> nameEx("pennies_sample")
> ### * pennies_sample
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pennies_sample
> ### Title: A sample of 50 pennies
> ### Aliases: pennies_sample
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> ggplot(pennies_sample, aes(x = year)) +
+   geom_histogram(binwidth = 5, boundary = 2000)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("promotions")
> ### * promotions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: promotions
> ### Title: Bank manager recommendations based on (binary) gender
> ### Aliases: promotions
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> glimpse(promotions)
Rows: 48
Columns: 3
$ id       <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…
$ decision <fct> promoted, promoted, promoted, promoted, promoted, promoted, p…
$ gender   <fct> male, male, male, male, male, male, male, male, male, male, m…
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("promotions_shuffled")
> ### * promotions_shuffled
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: promotions_shuffled
> ### Title: One permutation/shuffle of promotions
> ### Aliases: promotions_shuffled
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> glimpse(promotions)
Rows: 48
Columns: 3
$ id       <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…
$ decision <fct> promoted, promoted, promoted, promoted, promoted, promoted, p…
$ gender   <fct> male, male, male, male, male, male, male, male, male, male, m…
> glimpse(promotions_shuffled)
Rows: 48
Columns: 3
$ id       <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…
$ decision <fct> promoted, promoted, promoted, promoted, promoted, promoted, p…
$ gender   <fct> female, female, male, female, male, male, male, female, male,…
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("tactile_prop_red")
> ### * tactile_prop_red
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tactile_prop_red
> ### Title: Tactile sampling from a tub of balls
> ### Aliases: tactile_prop_red
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # Plot sampling distributions
> ggplot(tactile_prop_red, aes(x = prop_red)) +
+   geom_histogram(binwidth = 0.025) +
+   labs(
+     x = expression(hat(p)), y = "Number of samples",
+     title = "Sampling distribution of p_hat based 33 samples of size n = 50"
+   )
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:ggplot2’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.748 0.211 5.025 0.001 0.002 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
